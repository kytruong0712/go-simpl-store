// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CategoryImage is an object representing the database table.
type CategoryImage struct {
	ID             int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CategoryID     int64       `boil:"category_id" json:"category_id" toml:"category_id" yaml:"category_id"`
	UploadedFileID int64       `boil:"uploaded_file_id" json:"uploaded_file_id" toml:"uploaded_file_id" yaml:"uploaded_file_id"`
	Status         string      `boil:"status" json:"status" toml:"status" yaml:"status"`
	ImageType      null.String `boil:"image_type" json:"image_type,omitempty" toml:"image_type" yaml:"image_type,omitempty"`
	CreatedAt      time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt      time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *categoryImageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L categoryImageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CategoryImageColumns = struct {
	ID             string
	CategoryID     string
	UploadedFileID string
	Status         string
	ImageType      string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "id",
	CategoryID:     "category_id",
	UploadedFileID: "uploaded_file_id",
	Status:         "status",
	ImageType:      "image_type",
	CreatedAt:      "created_at",
	UpdatedAt:      "updated_at",
}

var CategoryImageTableColumns = struct {
	ID             string
	CategoryID     string
	UploadedFileID string
	Status         string
	ImageType      string
	CreatedAt      string
	UpdatedAt      string
}{
	ID:             "category_images.id",
	CategoryID:     "category_images.category_id",
	UploadedFileID: "category_images.uploaded_file_id",
	Status:         "category_images.status",
	ImageType:      "category_images.image_type",
	CreatedAt:      "category_images.created_at",
	UpdatedAt:      "category_images.updated_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CategoryImageWhere = struct {
	ID             whereHelperint64
	CategoryID     whereHelperint64
	UploadedFileID whereHelperint64
	Status         whereHelperstring
	ImageType      whereHelpernull_String
	CreatedAt      whereHelpertime_Time
	UpdatedAt      whereHelpertime_Time
}{
	ID:             whereHelperint64{field: "\"category_images\".\"id\""},
	CategoryID:     whereHelperint64{field: "\"category_images\".\"category_id\""},
	UploadedFileID: whereHelperint64{field: "\"category_images\".\"uploaded_file_id\""},
	Status:         whereHelperstring{field: "\"category_images\".\"status\""},
	ImageType:      whereHelpernull_String{field: "\"category_images\".\"image_type\""},
	CreatedAt:      whereHelpertime_Time{field: "\"category_images\".\"created_at\""},
	UpdatedAt:      whereHelpertime_Time{field: "\"category_images\".\"updated_at\""},
}

// CategoryImageRels is where relationship names are stored.
var CategoryImageRels = struct {
	Category     string
	UploadedFile string
}{
	Category:     "Category",
	UploadedFile: "UploadedFile",
}

// categoryImageR is where relationships are stored.
type categoryImageR struct {
	Category     *Category     `boil:"Category" json:"Category" toml:"Category" yaml:"Category"`
	UploadedFile *UploadedFile `boil:"UploadedFile" json:"UploadedFile" toml:"UploadedFile" yaml:"UploadedFile"`
}

// NewStruct creates a new relationship struct
func (*categoryImageR) NewStruct() *categoryImageR {
	return &categoryImageR{}
}

func (r *categoryImageR) GetCategory() *Category {
	if r == nil {
		return nil
	}
	return r.Category
}

func (r *categoryImageR) GetUploadedFile() *UploadedFile {
	if r == nil {
		return nil
	}
	return r.UploadedFile
}

// categoryImageL is where Load methods for each relationship are stored.
type categoryImageL struct{}

var (
	categoryImageAllColumns            = []string{"id", "category_id", "uploaded_file_id", "status", "image_type", "created_at", "updated_at"}
	categoryImageColumnsWithoutDefault = []string{"id", "category_id", "uploaded_file_id", "status"}
	categoryImageColumnsWithDefault    = []string{"image_type", "created_at", "updated_at"}
	categoryImagePrimaryKeyColumns     = []string{"id"}
	categoryImageGeneratedColumns      = []string{}
)

type (
	// CategoryImageSlice is an alias for a slice of pointers to CategoryImage.
	// This should almost always be used instead of []CategoryImage.
	CategoryImageSlice []*CategoryImage

	categoryImageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	categoryImageType                 = reflect.TypeOf(&CategoryImage{})
	categoryImageMapping              = queries.MakeStructMapping(categoryImageType)
	categoryImagePrimaryKeyMapping, _ = queries.BindMapping(categoryImageType, categoryImageMapping, categoryImagePrimaryKeyColumns)
	categoryImageInsertCacheMut       sync.RWMutex
	categoryImageInsertCache          = make(map[string]insertCache)
	categoryImageUpdateCacheMut       sync.RWMutex
	categoryImageUpdateCache          = make(map[string]updateCache)
	categoryImageUpsertCacheMut       sync.RWMutex
	categoryImageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single categoryImage record from the query.
func (q categoryImageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CategoryImage, error) {
	o := &CategoryImage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: failed to execute a one query for category_images")
	}

	return o, nil
}

// All returns all CategoryImage records from the query.
func (q categoryImageQuery) All(ctx context.Context, exec boil.ContextExecutor) (CategoryImageSlice, error) {
	var o []*CategoryImage

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodel: failed to assign all query results to CategoryImage slice")
	}

	return o, nil
}

// Count returns the count of all CategoryImage records in the query.
func (q categoryImageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to count category_images rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q categoryImageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: failed to check if category_images exists")
	}

	return count > 0, nil
}

// Category pointed to by the foreign key.
func (o *CategoryImage) Category(mods ...qm.QueryMod) categoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CategoryID),
	}

	queryMods = append(queryMods, mods...)

	return Categories(queryMods...)
}

// UploadedFile pointed to by the foreign key.
func (o *CategoryImage) UploadedFile(mods ...qm.QueryMod) uploadedFileQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UploadedFileID),
	}

	queryMods = append(queryMods, mods...)

	return UploadedFiles(queryMods...)
}

// LoadCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (categoryImageL) LoadCategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCategoryImage interface{}, mods queries.Applicator) error {
	var slice []*CategoryImage
	var object *CategoryImage

	if singular {
		var ok bool
		object, ok = maybeCategoryImage.(*CategoryImage)
		if !ok {
			object = new(CategoryImage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCategoryImage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCategoryImage))
			}
		}
	} else {
		s, ok := maybeCategoryImage.(*[]*CategoryImage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCategoryImage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCategoryImage))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &categoryImageR{}
		}
		args[object.CategoryID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &categoryImageR{}
			}

			args[obj.CategoryID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`categories`),
		qm.WhereIn(`categories.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Category")
	}

	var resultSlice []*Category
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Category")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for categories")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Category = foreign
		if foreign.R == nil {
			foreign.R = &categoryR{}
		}
		foreign.R.CategoryImages = append(foreign.R.CategoryImages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CategoryID == foreign.ID {
				local.R.Category = foreign
				if foreign.R == nil {
					foreign.R = &categoryR{}
				}
				foreign.R.CategoryImages = append(foreign.R.CategoryImages, local)
				break
			}
		}
	}

	return nil
}

// LoadUploadedFile allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (categoryImageL) LoadUploadedFile(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCategoryImage interface{}, mods queries.Applicator) error {
	var slice []*CategoryImage
	var object *CategoryImage

	if singular {
		var ok bool
		object, ok = maybeCategoryImage.(*CategoryImage)
		if !ok {
			object = new(CategoryImage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCategoryImage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCategoryImage))
			}
		}
	} else {
		s, ok := maybeCategoryImage.(*[]*CategoryImage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCategoryImage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCategoryImage))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &categoryImageR{}
		}
		args[object.UploadedFileID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &categoryImageR{}
			}

			args[obj.UploadedFileID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`uploaded_files`),
		qm.WhereIn(`uploaded_files.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UploadedFile")
	}

	var resultSlice []*UploadedFile
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UploadedFile")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for uploaded_files")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for uploaded_files")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UploadedFile = foreign
		if foreign.R == nil {
			foreign.R = &uploadedFileR{}
		}
		foreign.R.CategoryImages = append(foreign.R.CategoryImages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UploadedFileID == foreign.ID {
				local.R.UploadedFile = foreign
				if foreign.R == nil {
					foreign.R = &uploadedFileR{}
				}
				foreign.R.CategoryImages = append(foreign.R.CategoryImages, local)
				break
			}
		}
	}

	return nil
}

// SetCategory of the categoryImage to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.CategoryImages.
func (o *CategoryImage) SetCategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Category) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"category_images\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"category_id"}),
		strmangle.WhereClause("\"", "\"", 2, categoryImagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CategoryID = related.ID
	if o.R == nil {
		o.R = &categoryImageR{
			Category: related,
		}
	} else {
		o.R.Category = related
	}

	if related.R == nil {
		related.R = &categoryR{
			CategoryImages: CategoryImageSlice{o},
		}
	} else {
		related.R.CategoryImages = append(related.R.CategoryImages, o)
	}

	return nil
}

// SetUploadedFile of the categoryImage to the related item.
// Sets o.R.UploadedFile to related.
// Adds o to related.R.CategoryImages.
func (o *CategoryImage) SetUploadedFile(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UploadedFile) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"category_images\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"uploaded_file_id"}),
		strmangle.WhereClause("\"", "\"", 2, categoryImagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UploadedFileID = related.ID
	if o.R == nil {
		o.R = &categoryImageR{
			UploadedFile: related,
		}
	} else {
		o.R.UploadedFile = related
	}

	if related.R == nil {
		related.R = &uploadedFileR{
			CategoryImages: CategoryImageSlice{o},
		}
	} else {
		related.R.CategoryImages = append(related.R.CategoryImages, o)
	}

	return nil
}

// CategoryImages retrieves all the records using an executor.
func CategoryImages(mods ...qm.QueryMod) categoryImageQuery {
	mods = append(mods, qm.From("\"category_images\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"category_images\".*"})
	}

	return categoryImageQuery{q}
}

// FindCategoryImage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCategoryImage(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*CategoryImage, error) {
	categoryImageObj := &CategoryImage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"category_images\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, categoryImageObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: unable to select from category_images")
	}

	return categoryImageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CategoryImage) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no category_images provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(categoryImageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	categoryImageInsertCacheMut.RLock()
	cache, cached := categoryImageInsertCache[key]
	categoryImageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			categoryImageAllColumns,
			categoryImageColumnsWithDefault,
			categoryImageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(categoryImageType, categoryImageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(categoryImageType, categoryImageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"category_images\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"category_images\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to insert into category_images")
	}

	if !cached {
		categoryImageInsertCacheMut.Lock()
		categoryImageInsertCache[key] = cache
		categoryImageInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the CategoryImage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CategoryImage) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	categoryImageUpdateCacheMut.RLock()
	cache, cached := categoryImageUpdateCache[key]
	categoryImageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			categoryImageAllColumns,
			categoryImagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodel: unable to update category_images, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"category_images\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, categoryImagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(categoryImageType, categoryImageMapping, append(wl, categoryImagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update category_images row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by update for category_images")
	}

	if !cached {
		categoryImageUpdateCacheMut.Lock()
		categoryImageUpdateCache[key] = cache
		categoryImageUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q categoryImageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all for category_images")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected for category_images")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CategoryImageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), categoryImagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"category_images\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, categoryImagePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all in categoryImage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected all in update all categoryImage")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CategoryImage) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dbmodel: no category_images provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(categoryImageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	categoryImageUpsertCacheMut.RLock()
	cache, cached := categoryImageUpsertCache[key]
	categoryImageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			categoryImageAllColumns,
			categoryImageColumnsWithDefault,
			categoryImageColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			categoryImageAllColumns,
			categoryImagePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodel: unable to upsert category_images, could not build update column list")
		}

		ret := strmangle.SetComplement(categoryImageAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(categoryImagePrimaryKeyColumns) == 0 {
				return errors.New("dbmodel: unable to upsert category_images, could not build conflict column list")
			}

			conflict = make([]string, len(categoryImagePrimaryKeyColumns))
			copy(conflict, categoryImagePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"category_images\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(categoryImageType, categoryImageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(categoryImageType, categoryImageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to upsert category_images")
	}

	if !cached {
		categoryImageUpsertCacheMut.Lock()
		categoryImageUpsertCache[key] = cache
		categoryImageUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single CategoryImage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CategoryImage) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodel: no CategoryImage provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), categoryImagePrimaryKeyMapping)
	sql := "DELETE FROM \"category_images\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete from category_images")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by delete for category_images")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q categoryImageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodel: no categoryImageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from category_images")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for category_images")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CategoryImageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), categoryImagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"category_images\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, categoryImagePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from categoryImage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for category_images")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CategoryImage) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCategoryImage(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CategoryImageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CategoryImageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), categoryImagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"category_images\".* FROM \"category_images\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, categoryImagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to reload all in CategoryImageSlice")
	}

	*o = slice

	return nil
}

// CategoryImageExists checks if the CategoryImage row exists.
func CategoryImageExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"category_images\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: unable to check if category_images exists")
	}

	return exists, nil
}

// Exists checks if the CategoryImage row exists.
func (o *CategoryImage) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CategoryImageExists(ctx, exec, o.ID)
}
