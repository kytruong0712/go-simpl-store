// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UploadedFile is an object representing the database table.
type UploadedFile struct {
	ID         int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	FileName   string      `boil:"file_name" json:"file_name" toml:"file_name" yaml:"file_name"`
	FileSizeKB string      `boil:"file_size_kb" json:"file_size_kb" toml:"file_size_kb" yaml:"file_size_kb"`
	FilePath   string      `boil:"file_path" json:"file_path" toml:"file_path" yaml:"file_path"`
	FileType   string      `boil:"file_type" json:"file_type" toml:"file_type" yaml:"file_type"`
	Status     string      `boil:"status" json:"status" toml:"status" yaml:"status"`
	Resolution null.String `boil:"resolution" json:"resolution,omitempty" toml:"resolution" yaml:"resolution,omitempty"`
	CreatedAt  time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *uploadedFileR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L uploadedFileL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UploadedFileColumns = struct {
	ID         string
	FileName   string
	FileSizeKB string
	FilePath   string
	FileType   string
	Status     string
	Resolution string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "id",
	FileName:   "file_name",
	FileSizeKB: "file_size_kb",
	FilePath:   "file_path",
	FileType:   "file_type",
	Status:     "status",
	Resolution: "resolution",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
}

var UploadedFileTableColumns = struct {
	ID         string
	FileName   string
	FileSizeKB string
	FilePath   string
	FileType   string
	Status     string
	Resolution string
	CreatedAt  string
	UpdatedAt  string
}{
	ID:         "uploaded_files.id",
	FileName:   "uploaded_files.file_name",
	FileSizeKB: "uploaded_files.file_size_kb",
	FilePath:   "uploaded_files.file_path",
	FileType:   "uploaded_files.file_type",
	Status:     "uploaded_files.status",
	Resolution: "uploaded_files.resolution",
	CreatedAt:  "uploaded_files.created_at",
	UpdatedAt:  "uploaded_files.updated_at",
}

// Generated where

var UploadedFileWhere = struct {
	ID         whereHelperint64
	FileName   whereHelperstring
	FileSizeKB whereHelperstring
	FilePath   whereHelperstring
	FileType   whereHelperstring
	Status     whereHelperstring
	Resolution whereHelpernull_String
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
}{
	ID:         whereHelperint64{field: "\"uploaded_files\".\"id\""},
	FileName:   whereHelperstring{field: "\"uploaded_files\".\"file_name\""},
	FileSizeKB: whereHelperstring{field: "\"uploaded_files\".\"file_size_kb\""},
	FilePath:   whereHelperstring{field: "\"uploaded_files\".\"file_path\""},
	FileType:   whereHelperstring{field: "\"uploaded_files\".\"file_type\""},
	Status:     whereHelperstring{field: "\"uploaded_files\".\"status\""},
	Resolution: whereHelpernull_String{field: "\"uploaded_files\".\"resolution\""},
	CreatedAt:  whereHelpertime_Time{field: "\"uploaded_files\".\"created_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"uploaded_files\".\"updated_at\""},
}

// UploadedFileRels is where relationship names are stored.
var UploadedFileRels = struct {
	CategoryImages string
}{
	CategoryImages: "CategoryImages",
}

// uploadedFileR is where relationships are stored.
type uploadedFileR struct {
	CategoryImages CategoryImageSlice `boil:"CategoryImages" json:"CategoryImages" toml:"CategoryImages" yaml:"CategoryImages"`
}

// NewStruct creates a new relationship struct
func (*uploadedFileR) NewStruct() *uploadedFileR {
	return &uploadedFileR{}
}

func (r *uploadedFileR) GetCategoryImages() CategoryImageSlice {
	if r == nil {
		return nil
	}
	return r.CategoryImages
}

// uploadedFileL is where Load methods for each relationship are stored.
type uploadedFileL struct{}

var (
	uploadedFileAllColumns            = []string{"id", "file_name", "file_size_kb", "file_path", "file_type", "status", "resolution", "created_at", "updated_at"}
	uploadedFileColumnsWithoutDefault = []string{"id", "file_name", "file_size_kb", "file_path", "file_type", "status"}
	uploadedFileColumnsWithDefault    = []string{"resolution", "created_at", "updated_at"}
	uploadedFilePrimaryKeyColumns     = []string{"id"}
	uploadedFileGeneratedColumns      = []string{}
)

type (
	// UploadedFileSlice is an alias for a slice of pointers to UploadedFile.
	// This should almost always be used instead of []UploadedFile.
	UploadedFileSlice []*UploadedFile

	uploadedFileQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	uploadedFileType                 = reflect.TypeOf(&UploadedFile{})
	uploadedFileMapping              = queries.MakeStructMapping(uploadedFileType)
	uploadedFilePrimaryKeyMapping, _ = queries.BindMapping(uploadedFileType, uploadedFileMapping, uploadedFilePrimaryKeyColumns)
	uploadedFileInsertCacheMut       sync.RWMutex
	uploadedFileInsertCache          = make(map[string]insertCache)
	uploadedFileUpdateCacheMut       sync.RWMutex
	uploadedFileUpdateCache          = make(map[string]updateCache)
	uploadedFileUpsertCacheMut       sync.RWMutex
	uploadedFileUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single uploadedFile record from the query.
func (q uploadedFileQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UploadedFile, error) {
	o := &UploadedFile{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: failed to execute a one query for uploaded_files")
	}

	return o, nil
}

// All returns all UploadedFile records from the query.
func (q uploadedFileQuery) All(ctx context.Context, exec boil.ContextExecutor) (UploadedFileSlice, error) {
	var o []*UploadedFile

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodel: failed to assign all query results to UploadedFile slice")
	}

	return o, nil
}

// Count returns the count of all UploadedFile records in the query.
func (q uploadedFileQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to count uploaded_files rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q uploadedFileQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: failed to check if uploaded_files exists")
	}

	return count > 0, nil
}

// CategoryImages retrieves all the category_image's CategoryImages with an executor.
func (o *UploadedFile) CategoryImages(mods ...qm.QueryMod) categoryImageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"category_images\".\"uploaded_file_id\"=?", o.ID),
	)

	return CategoryImages(queryMods...)
}

// LoadCategoryImages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (uploadedFileL) LoadCategoryImages(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUploadedFile interface{}, mods queries.Applicator) error {
	var slice []*UploadedFile
	var object *UploadedFile

	if singular {
		var ok bool
		object, ok = maybeUploadedFile.(*UploadedFile)
		if !ok {
			object = new(UploadedFile)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUploadedFile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUploadedFile))
			}
		}
	} else {
		s, ok := maybeUploadedFile.(*[]*UploadedFile)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUploadedFile)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUploadedFile))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &uploadedFileR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &uploadedFileR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`category_images`),
		qm.WhereIn(`category_images.uploaded_file_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load category_images")
	}

	var resultSlice []*CategoryImage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice category_images")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on category_images")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for category_images")
	}

	if singular {
		object.R.CategoryImages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &categoryImageR{}
			}
			foreign.R.UploadedFile = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UploadedFileID {
				local.R.CategoryImages = append(local.R.CategoryImages, foreign)
				if foreign.R == nil {
					foreign.R = &categoryImageR{}
				}
				foreign.R.UploadedFile = local
				break
			}
		}
	}

	return nil
}

// AddCategoryImages adds the given related objects to the existing relationships
// of the uploaded_file, optionally inserting them as new records.
// Appends related to o.R.CategoryImages.
// Sets related.R.UploadedFile appropriately.
func (o *UploadedFile) AddCategoryImages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CategoryImage) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UploadedFileID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"category_images\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"uploaded_file_id"}),
				strmangle.WhereClause("\"", "\"", 2, categoryImagePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UploadedFileID = o.ID
		}
	}

	if o.R == nil {
		o.R = &uploadedFileR{
			CategoryImages: related,
		}
	} else {
		o.R.CategoryImages = append(o.R.CategoryImages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &categoryImageR{
				UploadedFile: o,
			}
		} else {
			rel.R.UploadedFile = o
		}
	}
	return nil
}

// UploadedFiles retrieves all the records using an executor.
func UploadedFiles(mods ...qm.QueryMod) uploadedFileQuery {
	mods = append(mods, qm.From("\"uploaded_files\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"uploaded_files\".*"})
	}

	return uploadedFileQuery{q}
}

// FindUploadedFile retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUploadedFile(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*UploadedFile, error) {
	uploadedFileObj := &UploadedFile{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"uploaded_files\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, uploadedFileObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodel: unable to select from uploaded_files")
	}

	return uploadedFileObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UploadedFile) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodel: no uploaded_files provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(uploadedFileColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	uploadedFileInsertCacheMut.RLock()
	cache, cached := uploadedFileInsertCache[key]
	uploadedFileInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			uploadedFileAllColumns,
			uploadedFileColumnsWithDefault,
			uploadedFileColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(uploadedFileType, uploadedFileMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(uploadedFileType, uploadedFileMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"uploaded_files\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"uploaded_files\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to insert into uploaded_files")
	}

	if !cached {
		uploadedFileInsertCacheMut.Lock()
		uploadedFileInsertCache[key] = cache
		uploadedFileInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the UploadedFile.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UploadedFile) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	uploadedFileUpdateCacheMut.RLock()
	cache, cached := uploadedFileUpdateCache[key]
	uploadedFileUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			uploadedFileAllColumns,
			uploadedFilePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodel: unable to update uploaded_files, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"uploaded_files\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, uploadedFilePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(uploadedFileType, uploadedFileMapping, append(wl, uploadedFilePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update uploaded_files row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by update for uploaded_files")
	}

	if !cached {
		uploadedFileUpdateCacheMut.Lock()
		uploadedFileUpdateCache[key] = cache
		uploadedFileUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q uploadedFileQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all for uploaded_files")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected for uploaded_files")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UploadedFileSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uploadedFilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"uploaded_files\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, uploadedFilePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to update all in uploadedFile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to retrieve rows affected all in update all uploadedFile")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UploadedFile) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("dbmodel: no uploaded_files provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(uploadedFileColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	uploadedFileUpsertCacheMut.RLock()
	cache, cached := uploadedFileUpsertCache[key]
	uploadedFileUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			uploadedFileAllColumns,
			uploadedFileColumnsWithDefault,
			uploadedFileColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			uploadedFileAllColumns,
			uploadedFilePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("dbmodel: unable to upsert uploaded_files, could not build update column list")
		}

		ret := strmangle.SetComplement(uploadedFileAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(uploadedFilePrimaryKeyColumns) == 0 {
				return errors.New("dbmodel: unable to upsert uploaded_files, could not build conflict column list")
			}

			conflict = make([]string, len(uploadedFilePrimaryKeyColumns))
			copy(conflict, uploadedFilePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"uploaded_files\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(uploadedFileType, uploadedFileMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(uploadedFileType, uploadedFileMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to upsert uploaded_files")
	}

	if !cached {
		uploadedFileUpsertCacheMut.Lock()
		uploadedFileUpsertCache[key] = cache
		uploadedFileUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single UploadedFile record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UploadedFile) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodel: no UploadedFile provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uploadedFilePrimaryKeyMapping)
	sql := "DELETE FROM \"uploaded_files\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete from uploaded_files")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by delete for uploaded_files")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q uploadedFileQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodel: no uploadedFileQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from uploaded_files")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for uploaded_files")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UploadedFileSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uploadedFilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"uploaded_files\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, uploadedFilePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: unable to delete all from uploadedFile slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodel: failed to get rows affected by deleteall for uploaded_files")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UploadedFile) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUploadedFile(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UploadedFileSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UploadedFileSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), uploadedFilePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"uploaded_files\".* FROM \"uploaded_files\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, uploadedFilePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodel: unable to reload all in UploadedFileSlice")
	}

	*o = slice

	return nil
}

// UploadedFileExists checks if the UploadedFile row exists.
func UploadedFileExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"uploaded_files\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodel: unable to check if uploaded_files exists")
	}

	return exists, nil
}

// Exists checks if the UploadedFile row exists.
func (o *UploadedFile) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UploadedFileExists(ctx, exec, o.ID)
}
